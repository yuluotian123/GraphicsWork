#pragma kernel TransmittanceLut TRANSMITTANCE_PASS
#pragma kernel MultiScatteringLut MULTISCATTERING_PASS
#pragma kernel DistantSkyLightLut SKYLIGHT_PASS MULTISCATTERING_APPROX_SAMPLING_ENABLED
#pragma kernel SkyViewLut SKYVIEWLUT_PASS MULTISCATTERING_APPROX_SAMPLING_ENABLED
#pragma kernel AerialPerspectiveLut MULTISCATTERING_APPROX_SAMPLING_ENABLED

#pragma multi_compile __ SECOND_ATMOSPHERE_LIGHT_ENABLED
//World: unity: y up UE: z up (left hand)
#include "Assets/myTinyWeatherSystem/Runtime/SkySystem/ShaderLibrary/SkyAtmosphereCommon.hlsl"

//TransmittanceLut
RWTexture2D<float4> _TransmittanceLutRW;
Buffer<float4> _UniformSphereSamplesBuffer;
[numthreads(8,8,1)]
void TransmittanceLut(uint3 id : SV_DispatchThreadID)
{
    float2 PixPos = float2(id.xy) + 0.5f;
    float2 UV = (PixPos) * float2(1 / (float) SKYCONFIG_TRANSMITTANCE_LUT_WIDTH, 1 / (float)SKYCONFIG_TRANSMITTANCE_LUT_HEIGHT);
    
    float ViewHeight;
    float ViewZenithCosAngle;
    UVToTransmittanceParams(ViewHeight, ViewZenithCosAngle,_BottomRadiusKm,_TopRadiusKm, UV);
    
    float3 WorldPos = float3(0.0f, ViewHeight, 0.0f);
    float3 WorldDir = float3(0.0f, ViewZenithCosAngle, -sqrt(1.0f - ViewZenithCosAngle * ViewZenithCosAngle));
    SamplingSetup Sampling = (SamplingSetup) 0;
	{
        Sampling.VariableSampleCount = false;
        Sampling.SampleCountIni = SKYCONFIG_TRANSMITTANCE_LUTSAMPLE_COUNT;
    }
    
    const bool Ground = false;
    const float DeviceZ = FarDepthValue;
    const bool MieRayPhase = false;
    const float3 NullLightDirection = float3(0.0f, 1.0f, 0.0f);
    const float3 NullLightIlluminance = float3(0.0f, 0.0f, 0.0f);
    const float AerialPespectiveViewDistanceScale = 1.0f;
    
    SingleScatteringResult ss = IntegrateSingleScatteredLuminance(
		float4(PixPos, 0.0f, 1.0f), WorldPos, WorldDir,
		Ground, Sampling, DeviceZ, MieRayPhase,
		NullLightDirection, NullLightDirection, NullLightIlluminance, NullLightIlluminance,
		AerialPespectiveViewDistanceScale);

    float3 transmittance = exp(-ss.OpticalDepth);
    
    _TransmittanceLutRW[int2(PixPos)] = float4(transmittance, 1);
}

//MultiScatteringLut
RWTexture2D<float4> _MultiScatteredLuminanceLutRW;
[numthreads(8,8,1)]
void MultiScatteringLut(uint3 id : SV_DispatchThreadID)
{
    float2 PixPos = float2(id.xy) + 0.5f;
    float CosLightZenithAngle = (PixPos.x / SKYCONFIG_MULTI_SCATTERED_LUMINANCE_LUT_WIDTH ) * 2.0f - 1.0f;
    float3 LightDir = float3(0.0f, CosLightZenithAngle, -sqrt(saturate(1.0f - CosLightZenithAngle * CosLightZenithAngle)));
    const float3 NullLightDirection = float3(0.0f, 1.0f, 0.0f);
    const float3 NullLightIlluminance = float3(0.0f, 0.0f, 0.0f);
    const float3 OneIlluminance = float3(1.0f, 1.0f, 1.0f);
    float ViewHeight = _BottomRadiusKm + (PixPos.y/ SKYCONFIG_MULTI_SCATTERED_LUMINANCE_LUT_HEIGHT) * (_TopRadiusKm - _BottomRadiusKm);
   
    float3 WorldPos = float3(0.0f, ViewHeight, 0.0f);
    float3 WorldDir = float3(0.0f, 1.0f, 0.0f);

    SamplingSetup Sampling = (SamplingSetup) 0;
	{
        Sampling.VariableSampleCount = false;
        Sampling.SampleCountIni = SKYCONFIG_MULTI_SCATTERING_LUTSAMPLE_COUNT;
    }
    
    const bool Ground = true;
    const float DeviceZ = FarDepthValue;
    const bool MieRayPhase = false;
    const float AerialPespectiveViewDistanceScale = 1.0f;

    const float SphereSolidAngle = 4.0f * M_PI;
    const float IsotropicPhase = 1.0f / SphereSolidAngle;

    // Cheap and good enough approximation (but lose energy)
    SingleScatteringResult r0 = IntegrateSingleScatteredLuminance(float4(PixPos, 0.0f, 1.0f), WorldPos, WorldDir, Ground, Sampling, DeviceZ, MieRayPhase,
		LightDir, NullLightDirection, OneIlluminance, NullLightIlluminance, AerialPespectiveViewDistanceScale);
    SingleScatteringResult r1 = IntegrateSingleScatteredLuminance(float4(PixPos, 0.0f, 1.0f), WorldPos, -WorldDir, Ground, Sampling, DeviceZ, MieRayPhase,
		LightDir, NullLightDirection, OneIlluminance, NullLightIlluminance, AerialPespectiveViewDistanceScale);
    
    float3 IntegratedIlluminance = (SphereSolidAngle / 2.0f) * (r0.L + r1.L);
    float3 MultiScatAs1 = (1.0f / 2.0f) * (r0.MultiScatAs1 + r1.MultiScatAs1);
    float3 InScatteredLuminance = IntegratedIlluminance * IsotropicPhase;
    
    float3 MultiScatAs1SQR = MultiScatAs1 * MultiScatAs1;
    float3 L = InScatteredLuminance * (1.0f + MultiScatAs1 + MultiScatAs1SQR + MultiScatAs1 * MultiScatAs1SQR + MultiScatAs1SQR * MultiScatAs1SQR);

    _MultiScatteredLuminanceLutRW[int2(PixPos)] = float4(L * _MultiScatteringFactor, 1);
}

RWTexture2D<float4> _DistantSkyLightLutRW;
int _BufferSize;
groupshared float3 GroupSkyLuminanceSamples[8 * 8];
[numthreads(8, 8, 1)]
void DistantSkyLightLut(uint3 id : SV_DispatchThreadID)
{
    int LinearIndex = id.y * _BufferSize + id.x;
    float2 PixPos = float2(id.xy) + 0.5f;
    float2 UV = PixPos * float2(1 / (float) SKYCONFIG_FAST_SKY_LUTWIDTH, 1 / (float) SKYCONFIG_FAST_SKY_LUTHEIGHT);

    float3 SamplePos = float3(0, _BottomRadiusKm + SKYCONFIG_DISTANT_SKY_LIGHT_LUTALTITUDE,0);
    float ViewHeight = length(SamplePos);
    
    const float3 SampleDir = _UniformSphereSamplesBuffer[LinearIndex].xyz;

    SamplingSetup Sampling = (SamplingSetup) 0;
	{
        Sampling.VariableSampleCount = false;
        Sampling.SampleCountIni = 10.0f;
    }
    const bool Ground = false;
    const float DeviceZ = FarDepthValue;
    const bool MieRayPhase = false;
    const float AerialPespectiveViewDistanceScale = 1.0f;
    
    SingleScatteringResult ss = IntegrateSingleScatteredLuminance(
		float4(PixPos, 0.0f, 1.0f), SamplePos, SampleDir,
		Ground, Sampling, DeviceZ, MieRayPhase,
		_AtmosphereLightDirection[0].xyz, _AtmosphereLightDirection[1].xyz,
		_AtmosphereLightIlluminanceOuterSpace[0].rgb, _AtmosphereLightIlluminanceOuterSpace[1].rgb,
		AerialPespectiveViewDistanceScale);
    
    GroupSkyLuminanceSamples[LinearIndex] = ss.L * _SkyLuminanceFactor.rgb;
    
    	// Wait for all group threads to be done
    GroupMemoryBarrierWithGroupSync();

    if (LinearIndex < 32)
    {
        GroupSkyLuminanceSamples[LinearIndex] += GroupSkyLuminanceSamples[LinearIndex + 32];
    }
    GroupMemoryBarrierWithGroupSync();
    if (LinearIndex < 16)
    {
        GroupSkyLuminanceSamples[LinearIndex] += GroupSkyLuminanceSamples[LinearIndex + 16];
    }
    GroupMemoryBarrierWithGroupSync();

    if (LinearIndex < 8)
    {
        GroupSkyLuminanceSamples[LinearIndex] += GroupSkyLuminanceSamples[LinearIndex + 8];
    }
    GroupMemoryBarrierWithGroupSync();

    if (LinearIndex < 4)
    {
        GroupSkyLuminanceSamples[LinearIndex] += GroupSkyLuminanceSamples[LinearIndex + 4];
    }
    GroupMemoryBarrierWithGroupSync();

    if (LinearIndex < 2)
    {
        GroupSkyLuminanceSamples[LinearIndex] += GroupSkyLuminanceSamples[LinearIndex + 2];
    }
    if (LinearIndex < 1)
    {
        const float3 AccumulatedLuminanceSamples = GroupSkyLuminanceSamples[LinearIndex] + GroupSkyLuminanceSamples[LinearIndex + 1];
        const float SamplerSolidAngle = 4.0f * M_PI / float(_BufferSize * _BufferSize);
        const float3 Illuminance = AccumulatedLuminanceSamples * SamplerSolidAngle;
        const float3 UniformPhaseFunction = 1.0f / (4.0f * M_PI);
        _DistantSkyLightLutRW[int2(PixPos)] = float4(Illuminance * UniformPhaseFunction, 1);
    }
}

RWTexture2D<float4> _SkyAtmosphereViewLutRW;
[numthreads(8, 8, 1)]
void SkyViewLut(uint3 id : SV_DispatchThreadID)
{
    float2 PixPos = float2(id.xy) + 0.5f;
    float2 UV = PixPos * float2(1 / (float) SKYCONFIG_FAST_SKY_LUTWIDTH, 1 / (float) SKYCONFIG_FAST_SKY_LUTHEIGHT);
    
    float3 WorldPos = GetTranslatedCameraPlanetPos();
    
    float3x3 LocalReferencial = GetSkyViewLutReferential();

    float ViewHeight = length(WorldPos);
    WorldPos = float3(0.0, ViewHeight, 0.0);
    
    float3 WorldDir;
    UvToSkyViewLutParams(WorldDir, ViewHeight, UV);
    
    float3 AtmosphereLightDirection0 = _AtmosphereLightDirection[0].xyz;
    AtmosphereLightDirection0 = mul(LocalReferencial, AtmosphereLightDirection0);
    float3 AtmosphereLightDirection1 = _AtmosphereLightDirection[1].xyz;
    AtmosphereLightDirection1 = mul(LocalReferencial, AtmosphereLightDirection1);
    
    if (!MoveToTopAtmosphere(WorldPos, WorldDir, _TopRadiusKm))
    {
		// Ray is not intersecting the atmosphere
        _SkyAtmosphereViewLutRW[int2(PixPos)] = 0.0f;
        return;
    }
    
    SamplingSetup Sampling = (SamplingSetup) 0;
	{
        Sampling.VariableSampleCount = true;
        Sampling.MinSampleCount = SKYCONFIG_FAST_SKY_LUTSAMPLE_COUNT_MIN;
        Sampling.MaxSampleCount = SKYCONFIG_FAST_SKY_LUTSAMPLE_COUNT_MAX;
        Sampling.DistanceToSampleCountMaxInv = 1 / (float) SKYCONFIG_FAST_SKY_LUTDISTANCE_TO_SAMPLE_COUNT_MAX;
    }
    
    const bool Ground = false;
    const float DeviceZ = FarDepthValue;
    const bool MieRayPhase = true;
    const float AerialPespectiveViewDistanceScale = 1.0f;
    
    SingleScatteringResult ss = IntegrateSingleScatteredLuminance(
		float4(PixPos, 0.0f, 1.0f), WorldPos, WorldDir,
		Ground, Sampling, DeviceZ, MieRayPhase,
		AtmosphereLightDirection0, AtmosphereLightDirection1,
		_AtmosphereLightIlluminanceOuterSpace[0].rgb, _AtmosphereLightIlluminanceOuterSpace[1].rgb,
		AerialPespectiveViewDistanceScale);
    
    _SkyAtmosphereViewLutRW[int2(PixPos)] = float4(ss.L, 1);
}

RWTexture3D<float4> _AerialPerspectiveLutRW;
float _AerialPerspectiveStartDepthKm;
float _AerialPespectiveViewDistanceScale;
[numthreads(4, 4, 4)]
void AerialPerspectiveLut(uint3 id : SV_DispatchThreadID)
{   
    float2 PixPos = float2(id.xy) + 0.5f;
    float2 UV = PixPos * float2(1 / (float) SKYCONFIG_AERIAL_PERSPECTIVE_LUTWIDTH, 1 / (float) SKYCONFIG_AERIAL_PERSPECTIVE_LUTWIDTH);    
    float4 SVPos = float4(UV * _ScreenRect.xy, 0.0f, 1.0f);
    
    float3 WorldDir = GetScreenWorldDir(SVPos);//?
    float3 CamPos = GetTranslatedCameraPlanetPos();
    
    //result in (float(id.z) + 0.5f)^2 / depthResolution in (0...16)
    float Slice = ((float(id.z) + 0.5f) * 1 / (float) SKYCONFIG_AERIAL_PERSPECTIVE_LUTDEPTH_RESOLUTION); // +0.5 to always have a distance to integrate over
    Slice *= Slice; // squared distribution
    Slice *= SKYCONFIG_AERIAL_PERSPECTIVE_LUTDEPTH_RESOLUTION;
    
    //start Depth
    float3 RayStartWorldPos = CamPos + _AerialPerspectiveStartDepthKm * WorldDir; // Offset according to start depth
    float ViewHeight;
    
    // farthest depth(Km)
    float tMax = Slice * SKYCONFIG_AERIAL_PERSPECTIVE_LUTDEPTH / (float)SKYCONFIG_AERIAL_PERSPECTIVE_LUTDEPTH_RESOLUTION;
    float3 VoxelWorldPos = RayStartWorldPos + tMax * WorldDir;
    float VoxelHeight = length(VoxelWorldPos);

    // Check if the voxel is under the horizon.
    const float UnderGround = VoxelHeight < _BottomRadiusKm;

	// Check if the voxel is beind the planet (to next check for below the horizon case)
    float3 CameraToVoxel = VoxelWorldPos - CamPos;
    float CameraToVoxelLen = length(CameraToVoxel);
    float3 CameraToVoxelDir = CameraToVoxel / CameraToVoxelLen;
    float PlanetNearT = RaySphereIntersectNearest(CamPos, CameraToVoxelDir, float3(0, 0, 0), _BottomRadiusKm);
    bool BelowHorizon = PlanetNearT > 0.0f && CameraToVoxelLen > PlanetNearT;
    
    if (BelowHorizon || UnderGround)
    {
        CamPos += normalize(CamPos) * 0.02f; 

        float3 VoxelWorldPosNorm = normalize(VoxelWorldPos);
        float3 CamProjOnGround = normalize(CamPos) * _BottomRadiusKm;
        float3 VoxProjOnGround = VoxelWorldPosNorm * _BottomRadiusKm;
        float3 VoxelGroundToRayStart = CamPos - VoxProjOnGround;
        if (BelowHorizon && dot(normalize(VoxelGroundToRayStart), VoxelWorldPosNorm) < 0.0001f)
        {
			// We are behind the sphere and the sphere normal is pointing away from V: we are below the horizon.
            float3 MiddlePoint = 0.5f * (CamProjOnGround + VoxProjOnGround);
            float MiddlePointHeight = length(MiddlePoint);

			// Compute the new position to evaluate and store the value in the voxel.
			// the position is the oposite side of the horizon point from the view point,
			// The offset of 1.001f is needed to get matching colors and for the ray to not hit the earth again later due to floating point accuracy
            float3 MiddlePointOnGround = normalize(MiddlePoint) * _BottomRadiusKm; // *1.001f;
            VoxelWorldPos = CamPos + 2.0f * (MiddlePointOnGround - CamPos);

			//CameraAerialPerspectiveVolumeUAV[ThreadId] = float4(1, 0, 0, 0);
			//return; // debug
        }
        else if (UnderGround)
        {
			//No obstruction from the planet, so use the point on the ground
            VoxelWorldPos = normalize(VoxelWorldPos) * (_BottomRadiusKm);
			//VoxelWorldPos = CamPos + CameraToVoxelDir * PlanetNearT;		// better match but gives visual artefact as visible voxels on a simple plane at altitude 0

			//CameraAerialPerspectiveVolumeUAV[ThreadId] = float4(0, 1, 0, 0);
			//return; // debug
        }
		 
        WorldDir = normalize(VoxelWorldPos - CamPos);
        RayStartWorldPos = CamPos + _AerialPerspectiveStartDepthKm * WorldDir; // Offset according to start depth
        tMax = length(VoxelWorldPos - RayStartWorldPos);
    }
    float tMaxMax = tMax;
    
    ViewHeight = length(RayStartWorldPos);
    if (ViewHeight >= _TopRadiusKm)
    {
        float3 prevWorlPos = RayStartWorldPos;
        if (!MoveToTopAtmosphere(RayStartWorldPos, WorldDir, _TopRadiusKm))
        {
			// Ray is not intersecting the atmosphere
            _AerialPerspectiveLutRW[id] = float4(0.0f, 0.0f, 0.0f, 1.0f);
            return;
        }
        float LengthToAtmosphere = length(prevWorlPos - RayStartWorldPos);
        if (tMaxMax < LengthToAtmosphere)
        {
			// tMaxMax for this voxel is not within the planet atmosphere
            _AerialPerspectiveLutRW[id] = float4(0.0f, 0.0f, 0.0f, 1.0f);
            return;
        }
		// Now world position has been moved to the atmosphere boundary: we need to reduce tMaxMax accordingly. 
        tMaxMax = max(0.0, tMaxMax - LengthToAtmosphere);
    }
    
    SamplingSetup Sampling = (SamplingSetup) 0;
	{
        Sampling.VariableSampleCount = false;
        Sampling.SampleCountIni = max(1.0f, (float(id.z) + 1.0f) * SKYCONFIG_AERIAL_PERSPECTIVE_LUTSAMPLE_COUNT_MAX_PER_SLICE);
    }
    const bool Ground = false;
    const float DeviceZ = FarDepthValue;
    const bool MieRayPhase = true;
    const float AerialPespectiveViewDistanceScale = _AerialPespectiveViewDistanceScale;
    SingleScatteringResult ss = IntegrateSingleScatteredLuminance(
		float4(PixPos, 0.0f, 1.0f), RayStartWorldPos, WorldDir,
		Ground, Sampling, DeviceZ, MieRayPhase,
		_AtmosphereLightDirection[0].xyz, _AtmosphereLightDirection[1].xyz,
		_AtmosphereLightIlluminanceOuterSpace[0].rgb, _AtmosphereLightIlluminanceOuterSpace[1].rgb,
		AerialPespectiveViewDistanceScale,
        tMaxMax);
    
    const float Transmittance = dot(ss.Transmittance, float3(1.0f / 3.0f, 1.0f / 3.0f, 1.0f / 3.0f));
    
    _AerialPerspectiveLutRW[id] = float4(ss.L, Transmittance);
}